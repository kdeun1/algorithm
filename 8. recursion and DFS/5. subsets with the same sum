function solution(arr) {
  let answer = 'NO';
  const sum = arr.reduce((acc, cur) => acc += cur);
  if (sum % 2 === 1) return answer;
  const oneHalf = sum / 2;

  function DFS(idx, useFlag, accSum) {
    if (useFlag) {
      accSum += arr[idx];
    }
    if (idx === arr.length - 1) {
      if (accSum === oneHalf) {
        answer = 'YES';
      }
      return;
    }
    idx++;
    DFS(idx, true, accSum);
    DFS(idx, false, accSum);
  }
  DFS(0, true, 0);
  DFS(0, false, 0);

  return answer;
}

solution([1, 3, 5, 6, 7, 10]); // YES
solution([1, 3, 5, 6, 7, 12]); // YES
solution([1, 3, 5, 6, 7, 14]); // YES
solution([1, 3, 5, 6, 7, 16]); // YES
solution([1, 3, 5, 6, 7, 18]); // NO / sum = 40 /

function solution(arr) {
  let answer = 'NO';
  let flag = 0;
  let total = arr.reduce((a, b) => a + b, 0);
  let n = arr.length;

  function DFS(L, sum) {
    if (flag) return;
    if (L === n) {
      if ((total - sum) === sum) {
        answer = 'YES';
        flag = 1;
      }
    } else {
      DFS(L + 1, sum + arr[L]);
      DFS(L + 1, sum);
    }
  }
  DFS(0, 0);

  return answer;
}